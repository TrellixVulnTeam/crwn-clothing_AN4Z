{"ast":null,"code":"var _jsxFileName = \"/home/noor/study/crwn-clothing/src/pages/shop/shop.component.jsx\";\n// import { collection, doc, getFirestore, onSnapshot } from \"firebase/firestore\";\nimport React from \"react\";\nimport { Route } from \"react-router\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\"; // import { convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport CollectionOverView from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionsOverViewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionOverViewWithSpinner = WithSpinner(CollectionOverView);\n_c = CollectionOverViewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  // state = {\n  //   loading: true,\n  // };\n  // unsubscribeFromSnapshot = null;\n  async componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    await fetchCollectionsStartAsync(); // const { updateCollections } = this.props;\n    // const db = getFirestore();\n    // onSnapshot(collection(db, \"collections\"), (snapshot) => {\n    //   const collecttionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collecttionsMap);\n    //   this.setState({ loading: false });\n    // });\n    // collection(db, \"collections\").then(res => console.log(res,'reees'))\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionsLoaded\n    } = this.props; // const { loading } = this.state;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        component: /*#__PURE__*/_jsxDEV(CollectionsOverViewContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: !isCollectionsLoaded,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionOverViewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/home/noor/study/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","CollectionOverView","CollectionPage","WithSpinner","CollectionsOverViewContainer","CollectionOverViewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionsLoaded","path","mapStateToProps","isCollectionFetching","mapDispatchToProps","dispatch"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CAEA;;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,iCAAtE;AAEA,OAAOC,kBAAP,MAA+B,sEAA/B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;;AAEA,MAAMC,6BAA6B,GAAGF,WAAW,CAACF,kBAAD,CAAjD;KAAMI,6B;AACN,MAAMC,yBAAyB,GAAGH,WAAW,CAACD,cAAD,CAA7C;MAAMI,yB;;AAEN,MAAMC,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AACrC;AACA;AACA;AAEA;AAEuB,QAAjBC,iBAAiB,GAAG;AACxB,UAAM;AAAEX,MAAAA;AAAF,QAAiC,KAAKY,KAA5C;AACA,UAAMZ,0BAA0B,EAAhC,CAFwB,CAGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiC,KAAKH,KAA5C,CADO,CAEP;;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAAjC;AAAoC,QAAA,SAAS,eAAE,QAAC,4BAAD;AAAA;AAAA;AAAA;AAAA;AAA/C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEF,KAAK,CAACE,IAAK,gBADtB;AAEE,QAAA,MAAM,EAAGJ,KAAD,iBAAW,QAAC,yBAAD;AAA2B,UAAA,SAAS,EAAE,CAACG,mBAAvC;AAAA,aAAgEH;AAAhE;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAjCoC;;AAoCvC,MAAMK,eAAe,GAAGlB,wBAAwB,CAAC;AAC/CmB,EAAAA,oBAAoB,EAAGjB,0BADwB;AAE/Cc,EAAAA,mBAAmB,EAAGb;AAFyB,CAAD,CAAhD;;AAKA,MAAMiB,kBAAkB,GAAIC,QAAD,KAAe;AACxCpB,EAAAA,0BAA0B,EAAG,MAAMoB,QAAQ,CAACpB,0BAA0B,EAA3B;AADH,CAAf,CAA3B;;AAIA,eAAeF,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["// import { collection, doc, getFirestore, onSnapshot } from \"firebase/firestore\";\nimport React from \"react\";\nimport { Route } from \"react-router\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\n// import { convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\n\nimport CollectionOverView from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionsOverViewContainer from \"../../components/collections-overview/collections-overview.container\";\n\nconst CollectionOverViewWithSpinner = WithSpinner(CollectionOverView);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // state = {\n  //   loading: true,\n  // };\n\n  // unsubscribeFromSnapshot = null;\n\n  async componentDidMount() {\n    const { fetchCollectionsStartAsync } = this.props;\n    await fetchCollectionsStartAsync();\n    // const { updateCollections } = this.props;\n    // const db = getFirestore();\n    // onSnapshot(collection(db, \"collections\"), (snapshot) => {\n    //   const collecttionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collecttionsMap);\n    //   this.setState({ loading: false });\n    // });\n    // collection(db, \"collections\").then(res => console.log(res,'reees'))\n  }\n\n  render() {\n    const { match, isCollectionsLoaded } = this.props;\n    // const { loading } = this.state;\n\n    return (\n      <div className=\"shop-page\">\n        <Route exact path={`${match.path}`} component={<CollectionsOverViewContainer />} />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching : selectIsCollectionFetching,\n  isCollectionsLoaded : selectIsCollectionsLoaded\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync : () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}