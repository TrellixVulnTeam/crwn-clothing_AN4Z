{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nconst config = {\n  apiKey: 'AIzaSyCdHT-AYHXjF7wOrfAchX4PIm3cSj5tn14',\n  authDomain: 'crwn-db.firebaseapp.com',\n  databaseURL: 'https://crwn-db.firebaseio.com',\n  projectId: 'crwn-db',\n  storageBucket: 'crwn-db.appspot.com',\n  messagingSenderId: '850995411664',\n  appId: '1:850995411664:web:7ddc01d597846f65'\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase; // // Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// import {\n//   getFirestore,\n//   doc,\n//   getDoc,\n//   setDoc,\n// } from \"firebase/firestore\";\n// import { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n// // TODO: Add SDKs for Firebase products that you want to use\n// // https://firebase.google.com/docs/web/setup#available-libraries\n// // Your web app's Firebase configuration\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyAU20I7ebwGIJC_IjzFBxhQCtVTK6xhYIE\",\n//   authDomain: \"crwn-db-b42b5.firebaseapp.com\",\n//   projectId: \"crwn-db-b42b5\",\n//   storageBucket: \"crwn-db-b42b5.appspot.com\",\n//   messagingSenderId: \"854206049581\",\n//   appId: \"1:854206049581:web:e41c158640502fca87b7a4\",\n// };\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// export const auth = getAuth(app);\n// console.log('auth', auth)\n// const provider = new GoogleAuthProvider();\n// const db = getFirestore();\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n//   const userRef = await doc(db, \"users\", userAuth.uid);\n//   const snapShot = await getDoc(userRef);\n//   // Add a new document in collection \"users\"\n//   if (!snapShot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       console.log('in')\n//       await setDoc(userRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   }\n//   return userRef;\n// };\n// export const signInWithGoogle = () =>\n//   signInWithPopup(auth, provider)\n//     .then((result) => {\n//       console.log(result, 'google sign in')\n//       // This gives you a Google Access Token. You can use it to access the Google API.\n//       // const credential = GoogleAuthProvider.credentialFromResult(result);\n//       // const token = credential.accessToken;\n//       // // The signed-in user info.\n//       // const user = result.user;\n//       // ...\n//     })\n//     .catch((error) => {\n//       console.log(error,'error sign in with google')\n//       // Handle Errors here.\n//       // const errorCode = error.code;\n//       // const errorMessage = error.message;\n//       // // The email of the user's account used.\n//       // const email = error.email;\n//       // // The AuthCredential type that was used.\n//       // const credential = GoogleAuthProvider.credentialFromError(error);\n//       // ...\n//     });\n// export const convertCollectionsSnapshotToMap = (collections) => {\n//   const transformedCollection = collections.docs.map(doc => {\n//     const { title, items } = doc.data()\n//     return {\n//       routeName : encodeURI(title),\n//       id : doc.id,\n//       items,\n//     }\n//   }) \n//   console.log({transformedCollection});\n//   transformedCollection.reduce((a, collection) => {\n//     a[collection.title.toLowerCase()] = collection;\n//     return a;\n//   } ,{})\n// }","map":{"version":3,"sources":["/home/noor/study/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,2BAAP;AACA,OAAO,sBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,yBAFC;AAGbC,EAAAA,WAAW,EAAE,gCAHA;AAIbC,EAAAA,SAAS,EAAE,SAJE;AAKbC,EAAAA,aAAa,EAAE,qBALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB;AAEA,OAAO,MAAMS,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBM;AAyBP,OAAO,MAAMgB,IAAI,GAAG7B,QAAQ,CAAC6B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMgB,QAAQ,GAAG,IAAI9B,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe9B,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\nconst config = {\n  apiKey: 'AIzaSyCdHT-AYHXjF7wOrfAchX4PIm3cSj5tn14',\n  authDomain: 'crwn-db.firebaseapp.com',\n  databaseURL: 'https://crwn-db.firebaseio.com',\n  projectId: 'crwn-db',\n  storageBucket: 'crwn-db.appspot.com',\n  messagingSenderId: '850995411664',\n  appId: '1:850995411664:web:7ddc01d597846f65'\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n// // Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// import {\n//   getFirestore,\n//   doc,\n//   getDoc,\n//   setDoc,\n// } from \"firebase/firestore\";\n\n// import { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\n// // TODO: Add SDKs for Firebase products that you want to use\n// // https://firebase.google.com/docs/web/setup#available-libraries\n\n// // Your web app's Firebase configuration\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyAU20I7ebwGIJC_IjzFBxhQCtVTK6xhYIE\",\n//   authDomain: \"crwn-db-b42b5.firebaseapp.com\",\n//   projectId: \"crwn-db-b42b5\",\n//   storageBucket: \"crwn-db-b42b5.appspot.com\",\n//   messagingSenderId: \"854206049581\",\n//   appId: \"1:854206049581:web:e41c158640502fca87b7a4\",\n// };\n\n\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// export const auth = getAuth(app);\n// console.log('auth', auth)\n// const provider = new GoogleAuthProvider();\n\n// const db = getFirestore();\n\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n\n//   const userRef = await doc(db, \"users\", userAuth.uid);\n//   const snapShot = await getDoc(userRef);\n\n//   // Add a new document in collection \"users\"\n//   if (!snapShot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n\n//     try {\n//       console.log('in')\n//       await setDoc(userRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   }\n//   return userRef;\n// };\n\n// export const signInWithGoogle = () =>\n//   signInWithPopup(auth, provider)\n//     .then((result) => {\n//       console.log(result, 'google sign in')\n//       // This gives you a Google Access Token. You can use it to access the Google API.\n//       // const credential = GoogleAuthProvider.credentialFromResult(result);\n//       // const token = credential.accessToken;\n//       // // The signed-in user info.\n//       // const user = result.user;\n//       // ...\n//     })\n//     .catch((error) => {\n//       console.log(error,'error sign in with google')\n//       // Handle Errors here.\n//       // const errorCode = error.code;\n//       // const errorMessage = error.message;\n//       // // The email of the user's account used.\n//       // const email = error.email;\n//       // // The AuthCredential type that was used.\n//       // const credential = GoogleAuthProvider.credentialFromError(error);\n//       // ...\n//     });\n\n\n// export const convertCollectionsSnapshotToMap = (collections) => {\n//   const transformedCollection = collections.docs.map(doc => {\n//     const { title, items } = doc.data()\n//     return {\n//       routeName : encodeURI(title),\n//       id : doc.id,\n//       items,\n//     }\n//   }) \n\n//   console.log({transformedCollection});\n\n//   transformedCollection.reduce((a, collection) => {\n//     a[collection.title.toLowerCase()] = collection;\n//     return a;\n//   } ,{})\n// }\n"]},"metadata":{},"sourceType":"module"}