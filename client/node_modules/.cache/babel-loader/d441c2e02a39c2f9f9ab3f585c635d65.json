{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc, collection, WriteBatch } from \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { batch } from \"react-redux\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAU20I7ebwGIJC_IjzFBxhQCtVTK6xhYIE\",\n  authDomain: \"crwn-db-b42b5.firebaseapp.com\",\n  projectId: \"crwn-db-b42b5\",\n  storageBucket: \"crwn-db-b42b5.appspot.com\",\n  messagingSenderId: \"854206049581\",\n  appId: \"1:854206049581:web:e41c158640502fca87b7a4\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\nconst db = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = await doc(db, \"users\", userAuth.uid);\n  const snapShot = await getDoc(userRef); // Add a new document in collection \"users\"\n\n  if (!snapShot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const signInWithGoogle = () => signInWithPopup(auth, provider).then(result => {\n  console.log(result, 'google sign in'); // This gives you a Google Access Token. You can use it to access the Google API.\n  // const credential = GoogleAuthProvider.credentialFromResult(result);\n  // const token = credential.accessToken;\n  // // The signed-in user info.\n  // const user = result.user;\n  // ...\n}).catch(error => {\n  console.log(error, 'error sign in with google'); // Handle Errors here.\n  // const errorCode = error.code;\n  // const errorMessage = error.message;\n  // // The email of the user's account used.\n  // const email = error.email;\n  // // The AuthCredential type that was used.\n  // const credential = GoogleAuthProvider.credentialFromError(error);\n  // ...\n});\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey); // console.log(collectionRef.path)\n\n  console.log(await doc(db, collectionKey, ''), 'ref'); // console.log(objectsToAdd, 'ddd')\n\n  const batch = WriteBatch(db); // objectsToAdd.forEach(obj => {\n  //   const newDocRef = await doc(db, collectionKey, o);\n  //   console.log({newDocRef}, 'ref');\n  //   batch.set(newDocRef, obj)\n  // })\n  // return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title),\n      id: doc.id,\n      items\n    };\n  });\n  console.log({\n    transformedCollection\n  });\n  transformedCollection.reduce((a, collection) => {\n    a[collection.title.toLowerCase()] = collection;\n    return a;\n  }, {});\n};","map":{"version":3,"sources":["/home/noor/study/crwn-clothing/src/firebase/firebase.utils.js"],"names":["initializeApp","getFirestore","doc","getDoc","setDoc","collection","WriteBatch","getAuth","signInWithPopup","GoogleAuthProvider","batch","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","provider","db","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","exists","displayName","email","createdAt","Date","error","console","log","message","signInWithGoogle","then","result","catch","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","id","reduce","a","toLowerCase"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  WriteBatch,\n} from \"firebase/firestore\";\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { batch } from \"react-redux\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAU20I7ebwGIJC_IjzFBxhQCtVTK6xhYIE\",\n  authDomain: \"crwn-db-b42b5.firebaseapp.com\",\n  projectId: \"crwn-db-b42b5\",\n  storageBucket: \"crwn-db-b42b5.appspot.com\",\n  messagingSenderId: \"854206049581\",\n  appId: \"1:854206049581:web:e41c158640502fca87b7a4\",\n};\n\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(app);\n\nconst provider = new GoogleAuthProvider();\n\nconst db = getFirestore();\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = await doc(db, \"users\", userAuth.uid);\n  const snapShot = await getDoc(userRef);\n\n  // Add a new document in collection \"users\"\n  if (!snapShot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const signInWithGoogle = () =>\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      console.log(result, 'google sign in')\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // const credential = GoogleAuthProvider.credentialFromResult(result);\n      // const token = credential.accessToken;\n      // // The signed-in user info.\n      // const user = result.user;\n      // ...\n    })\n    .catch((error) => {\n      console.log(error,'error sign in with google')\n      // Handle Errors here.\n      // const errorCode = error.code;\n      // const errorMessage = error.message;\n      // // The email of the user's account used.\n      // const email = error.email;\n      // // The AuthCredential type that was used.\n      // const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n\nexport const addCollectionAndDocuments = async(collectionKey, objectsToAdd) => {\n\n  const collectionRef = collection(db, collectionKey);\n  // console.log(collectionRef.path)\n  console.log(await doc(db, collectionKey, ''), 'ref');\n  // console.log(objectsToAdd, 'ddd')\n  const batch = WriteBatch(db);\n\n  // objectsToAdd.forEach(obj => {\n  //   const newDocRef = await doc(db, collectionKey, o);\n  //   console.log({newDocRef}, 'ref');\n  //   batch.set(newDocRef, obj)\n  // })\n\n  // return await batch.commit();\n}\n\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data()\n    return {\n      routeName : encodeURI(title),\n      id : doc.id,\n      items,\n    }\n  }) \n\n  console.log({transformedCollection});\n\n  transformedCollection.reduce((a, collection) => {\n    a[collection.title.toLowerCase()] = collection;\n    return a;\n  } ,{})\n}\n"]},"metadata":{},"sourceType":"module"}