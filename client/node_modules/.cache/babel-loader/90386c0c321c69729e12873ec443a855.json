{"ast":null,"code":"// // Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// import {\n//   getFirestore,\n//   doc,\n//   getDoc,\n//   setDoc,\n// } from \"firebase/firestore\";\n// import { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n// // TODO: Add SDKs for Firebase products that you want to use\n// // https://firebase.google.com/docs/web/setup#available-libraries\n// // Your web app's Firebase configuration\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyAU20I7ebwGIJC_IjzFBxhQCtVTK6xhYIE\",\n//   authDomain: \"crwn-db-b42b5.firebaseapp.com\",\n//   projectId: \"crwn-db-b42b5\",\n//   storageBucket: \"crwn-db-b42b5.appspot.com\",\n//   messagingSenderId: \"854206049581\",\n//   appId: \"1:854206049581:web:e41c158640502fca87b7a4\",\n// };\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// export const auth = getAuth(app);\n// console.log('auth', auth)\n// const provider = new GoogleAuthProvider();\n// const db = getFirestore();\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n//   const userRef = await doc(db, \"users\", userAuth.uid);\n//   const snapShot = await getDoc(userRef);\n//   // Add a new document in collection \"users\"\n//   if (!snapShot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       console.log('in')\n//       await setDoc(userRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   }\n//   return userRef;\n// };\n// export const signInWithGoogle = () =>\n//   signInWithPopup(auth, provider)\n//     .then((result) => {\n//       console.log(result, 'google sign in')\n//       // This gives you a Google Access Token. You can use it to access the Google API.\n//       // const credential = GoogleAuthProvider.credentialFromResult(result);\n//       // const token = credential.accessToken;\n//       // // The signed-in user info.\n//       // const user = result.user;\n//       // ...\n//     })\n//     .catch((error) => {\n//       console.log(error,'error sign in with google')\n//       // Handle Errors here.\n//       // const errorCode = error.code;\n//       // const errorMessage = error.message;\n//       // // The email of the user's account used.\n//       // const email = error.email;\n//       // // The AuthCredential type that was used.\n//       // const credential = GoogleAuthProvider.credentialFromError(error);\n//       // ...\n//     });\n// export const convertCollectionsSnapshotToMap = (collections) => {\n//   const transformedCollection = collections.docs.map(doc => {\n//     const { title, items } = doc.data()\n//     return {\n//       routeName : encodeURI(title),\n//       id : doc.id,\n//       items,\n//     }\n//   }) \n//   console.log({transformedCollection});\n//   transformedCollection.reduce((a, collection) => {\n//     a[collection.title.toLowerCase()] = collection;\n//     return a;\n//   } ,{})\n// }","map":{"version":3,"sources":["/home/noor/study/crwn-clothing/src/firebase/firebase.utils.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["// // Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// import {\n//   getFirestore,\n//   doc,\n//   getDoc,\n//   setDoc,\n// } from \"firebase/firestore\";\n\n// import { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\n// // TODO: Add SDKs for Firebase products that you want to use\n// // https://firebase.google.com/docs/web/setup#available-libraries\n\n// // Your web app's Firebase configuration\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyAU20I7ebwGIJC_IjzFBxhQCtVTK6xhYIE\",\n//   authDomain: \"crwn-db-b42b5.firebaseapp.com\",\n//   projectId: \"crwn-db-b42b5\",\n//   storageBucket: \"crwn-db-b42b5.appspot.com\",\n//   messagingSenderId: \"854206049581\",\n//   appId: \"1:854206049581:web:e41c158640502fca87b7a4\",\n// };\n\n\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// export const auth = getAuth(app);\n// console.log('auth', auth)\n// const provider = new GoogleAuthProvider();\n\n// const db = getFirestore();\n\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n\n//   const userRef = await doc(db, \"users\", userAuth.uid);\n//   const snapShot = await getDoc(userRef);\n\n//   // Add a new document in collection \"users\"\n//   if (!snapShot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n\n//     try {\n//       console.log('in')\n//       await setDoc(userRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   }\n//   return userRef;\n// };\n\n// export const signInWithGoogle = () =>\n//   signInWithPopup(auth, provider)\n//     .then((result) => {\n//       console.log(result, 'google sign in')\n//       // This gives you a Google Access Token. You can use it to access the Google API.\n//       // const credential = GoogleAuthProvider.credentialFromResult(result);\n//       // const token = credential.accessToken;\n//       // // The signed-in user info.\n//       // const user = result.user;\n//       // ...\n//     })\n//     .catch((error) => {\n//       console.log(error,'error sign in with google')\n//       // Handle Errors here.\n//       // const errorCode = error.code;\n//       // const errorMessage = error.message;\n//       // // The email of the user's account used.\n//       // const email = error.email;\n//       // // The AuthCredential type that was used.\n//       // const credential = GoogleAuthProvider.credentialFromError(error);\n//       // ...\n//     });\n\n\n// export const convertCollectionsSnapshotToMap = (collections) => {\n//   const transformedCollection = collections.docs.map(doc => {\n//     const { title, items } = doc.data()\n//     return {\n//       routeName : encodeURI(title),\n//       id : doc.id,\n//       items,\n//     }\n//   }) \n\n//   console.log({transformedCollection});\n\n//   transformedCollection.reduce((a, collection) => {\n//     a[collection.title.toLowerCase()] = collection;\n//     return a;\n//   } ,{})\n// }\n"]},"metadata":{},"sourceType":"module"}